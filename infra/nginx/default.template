server {
    listen 80;
    server_name ${SERVER_NAME};
    index index.php index.html;
    root /var/www/public;

    rewrite_log on;

    error_log  /var/log/nginx/error.log notice;
    access_log /var/log/nginx/access.log;

    # For Basic Authentication
    #auth_basic "This is Protected";
    #auth_basic_user_file /path/to/password-file;

    # Set CORS headers
    #location ~* \.(eot|ttf|woff) {
    #    add_header Access-Control-Allow-Origin *;
    #}

    location / {
        try_files ${ESC}uri ${ESC}uri/ /index.php?${ESC}args;
    }

    location ~ \.php${ESC} {
        try_files ${ESC}uri ${ESC}uri/ =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)${ESC};
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME ${ESC}document_root${ESC}fastcgi_script_name;
        fastcgi_param PATH_INFO ${ESC}fastcgi_path_info;
    }

}

server {
    listen 80;

    # Force redirect to URL without 'www'
    server_name www.${SERVER_NAME};
    return 301 ${ESC}scheme://${SERVER_NAME}${ESC}request_uri;
}

server {
    listen 443 ssl;

    server_name ${SERVER_NAME};
    index index.php index.html;
    root /var/www/public;

    rewrite_log on;
    client_max_body_size 512M;

    error_log  /var/log/nginx/error.log notice;
    access_log /var/log/nginx/access.log main;

    # For Basic Authentication
    #auth_basic "This is Protected";
    #auth_basic_user_file /path/to/password-file;

    location / {
        try_files ${ESC}uri ${ESC}uri/ /index.php?${ESC}args;
    }

    location ~ \.php${ESC} {
        try_files ${ESC}uri ${ESC}uri/ =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)${ESC};
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME ${ESC}document_root${ESC}fastcgi_script_name;
        fastcgi_param PATH_INFO ${ESC}fastcgi_path_info;
    }

    # let the browsers know that we only accept HTTPS
    add_header Strict-Transport-Security max-age=2592000;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    ssl_certificate /etc/ssl/server.cert;
    ssl_certificate_key /etc/ssl/server.key;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;

    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers  on;

}
