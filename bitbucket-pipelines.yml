image: pyguerder/bitbucket-pipelines-php72

pipelines:
  default:
    - step:
        caches:
          - composer
        name: Run unit tests
        image: phpunit/phpunit:latest
        script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan config:cache
            - php artisan migrate:refresh --seed
            - ./vendor/bin/phpunit
        services:
            - mysql
  branches:
    development:
      - step:
          caches:
            - composer
          name: Run integration test for development branch
          image: phpunit/phpunit:latest
          script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan key:generate
            - php artisan migrate:refresh --seed
            - ./vendor/bin/phpunit
          services:
            - mysql
    staging:
      - step:
          caches:
            - composer
          name: Run integration test for staging branch
          image: phpunit/phpunit:latest
          script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan key:generate
            - php artisan migrate:refresh --seed
            - ./vendor/bin/phpunit
          services:
            - mysql
      - step:
          name: Deploy to staging environment
          deployment: staging
          script:
            - echo "Deploy to Staging"
    master:
      - step:
          caches:
            - composer
          name: Run integration test for master branch
          image: phpunit/phpunit:latest
          script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan key:generate
            - php artisan migrate:refresh --seed
            - ./vendor/bin/phpunit
          services:
            - mysql
  pull-requests:
    '**':
      - step:
          name: Run integration test
          image: phpunit/phpunit:latest
          script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan key:generate
            - php artisan migrate:refresh --seed
            - ./vendor/bin/phpunit
          services:
            - mysql
    feature/*:
      - step:
          name: Run integration test for feature branch
          image: phpunit/phpunit:latest
          script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan key:generate
            - php artisan migrate:refresh --seed
            - ./vendor/bin/phpunit
          services:
            - mysql
    fix/*:
      - step:
          name: Run integration test for fix branch
          image: phpunit/phpunit:latest
          script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan key:generate
            - php artisan migrate:refresh --seed
            - phpunit --version
            - ./vendor/bin/phpunit
          services:
            - mysql
    staging:
      - step:
          name: Run integration test for staging branch
          image: phpunit/phpunit:latest
          script:
            - apk add --no-cache php7-gd php7-xmlwriter
            - php -r "file_exists('.env') || copy('.env.testing', '.env');"
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-ansi --no-interaction
            - php artisan key:generate
            - php artisan migrate:refresh --seed
            - ./vendor/bin/phpunit
          services:
            - mysql
      - step:
          name: Deploy to staging environment
          deployment: staging
          script:
            - echo "Deploying to Staging"
  tags:
    release-stg-*:
      - step:
          name: Sentry Release
          image: getsentry/sentry-cli
          script:
            - sentry-cli releases -o "${SENTRY_ORG}" new -p "${SENTRY_PROJECT}" "${BITBUCKET_BUILD_NUMBER}"
            - sentry-cli releases -o "${SENTRY_ORG}" set-commits --auto "${BITBUCKET_BUILD_NUMBER}"
      - step:
          name: Build
          script:
            - echo "Deploying to Staging"
      - step:
          name: Sentry Finalize Release & Deploy
          deployment: staging
          image: getsentry/sentry-cli
          script:
            - sentry-cli releases -o "${SENTRY_ORG}" finalize "${BITBUCKET_BUILD_NUMBER}"
            - sentry-cli releases -o "${SENTRY_ORG}" deploys "${BITBUCKET_BUILD_NUMBER}" new -e "staging"
      - step:
          caches:
            - composer
          name: Build and release
          script:
            - echo "Deploying to Staging"
            - mkdir -p ~/.ssh
            - cat ./deploy/known_hosts >> ~/.ssh/known_hosts
            - echo $DEPLOY_STAGING_SSH_KEY > ~/.ssh/id_rsa.tmp
            - base64 -d ~/.ssh/id_rsa.tmp > ~/.ssh/id_rsa
            - chmod 600 ~/.ssh/id_rsa
            - apt-get update
            - apt-get install curl git -y
            - git remote set-url origin ${BITBUCKET_GIT_SSH_ORIGIN}
            - curl -LO https://getcomposer.org/composer.phar
            - chmod +x ./composer.phar
            - mv ./composer.phar /usr/local/bin/composer
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-dev --no-ansi --no-interaction
            - cp ./deploy/recipes/slack.php ./vendor/deployer/deployer/recipe/slack.php
            - php vendor/bin/dep -f=./deploy/deploy.php deploy staging
    release-prod-*:
      - step:
          name: Sentry Release
          image: getsentry/sentry-cli
          script:
            - sentry-cli releases -o "${SENTRY_ORG}" new -p "${SENTRY_PROJECT}" "${BITBUCKET_BUILD_NUMBER}"
            - sentry-cli releases -o "${SENTRY_ORG}" set-commits --auto "${BITBUCKET_BUILD_NUMBER}"
      - step:
          name: Build
          script:
            - echo "Deploying to Production"
      - step:
          name: Sentry Finalize Release & Deploy
          deployment: production
          image: getsentry/sentry-cli
          script:
            - sentry-cli releases -o "${SENTRY_ORG}" finalize "${BITBUCKET_BUILD_NUMBER}"
            - sentry-cli releases -o "${SENTRY_ORG}" deploys "${BITBUCKET_BUILD_NUMBER}" new -e "production"
      - step:
          caches:
            - composer
          name: Deploy to Remote Server
          script:
            - echo "Deploying to Production"
            - mkdir -p ~/.ssh
            - cat ./deploy/known_hosts >> ~/.ssh/known_hosts
            - echo $DEPLOY_PRODUCTION_SSH_KEY > ~/.ssh/id_rsa.tmp
            - base64 -d ~/.ssh/id_rsa.tmp > ~/.ssh/id_rsa
            - chmod 600 ~/.ssh/id_rsa
            - apt-get update
            - apt-get install curl git -y
            - git remote set-url origin ${BITBUCKET_GIT_SSH_ORIGIN}
            - curl -LO https://getcomposer.org/composer.phar
            - chmod +x ./composer.phar
            - mv ./composer.phar /usr/local/bin/composer
            - composer --version
            - composer install -o --no-suggest --no-progress --prefer-dist --optimize-autoloader --no-dev --no-ansi --no-interaction
            - cp ./deploy/recipes/slack.php ./vendor/deployer/deployer/recipe/slack.php
            - php vendor/bin/dep -f=./deploy/deploy.php deploy production

definitions:
  services:
    mysql:
      image: mysql:5.7
      variables:
        MYSQL_DATABASE: 'pipelines'
        MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
        MYSQL_USER: 'test_user'
        MYSQL_PASSWORD: 'test_user_password'
